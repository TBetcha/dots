-- -- import lspconfig plugin safely
-- local lspconfig_status, lspconfig = pcall(require, "lspconfig")
-- if not lspconfig_status then
-- 	return
-- end
--
-- -- import cmp-nvim-lsp plugin safely
-- local cmp_nvim_lsp_status, cmp_nvim_lsp = pcall(require, "cmp_nvim_lsp")
-- if not cmp_nvim_lsp_status then
-- 	return
-- end
--
-- -- import typescript plugin safely
-- local typescript_setup, typescript = pcall(require, "typescript")
-- if not typescript_setup then
-- 	return
-- end
--
-- local keymap = vim.keymap -- for conciseness
--
-- -- enable keybinds only for when lsp server available
-- local on_attach = function(client, bufnr)
-- 	-- keybind options
-- 	local opts = { noremap = true, silent = true, buffer = bufnr }
--
-- 	-- set keybinds
-- 	keymap.set("n", "<leader>cf", "<cmd>Lspsaga finder tyd+ref+def<CR>", opts) -- show definition, references
-- 	keymap.set("n", "gdc", function() vim.lsp.buf.declaration() end, opts) -- got to declaration
-- 	keymap.set("n", "<leader>gd", function() vim.lsp.buf.definition() end, opts) -- lsp go to definition
-- 	keymap.set("n", "gd", "<cmd>Lspsaga peek_definition<CR>", opts) -- see definition and make edits in window
-- 	keymap.set("n", "gi", function() vim.lsp.buf.implementation() end, opts) -- go to implementation
-- 	keymap.set("n", "<leader>ca", "<cmd>Lspsaga code_action<CR>", opts) -- see available code actions
-- 	keymap.set("n", "<leader>rn", "<cmd>Lspsaga rename<CR>", opts) -- smart rename
-- 	keymap.set("n", "<leader>D", "<cmd>Lspsaga show_line_diagnostics<CR>", opts) -- show  diagnostics for line
-- 	keymap.set("n", "<leader>d", "<cmd>Lspsaga show_cursor_diagnostics<CR>", opts) -- show diagnostics for cursor
-- 	keymap.set("n", "[d", "<cmd>Lspsaga diagnostic_jump_prev<CR>", opts) -- jump to previous diagnostic in buffer
-- 	keymap.set("n", "]d", "<cmd>Lspsaga diagnostic_jump_next<CR>", opts) -- jump to next diagnostic in buffer
-- 	keymap.set("n", "K", "<cmd>Lspsaga hover_doc<CR>", opts) -- show documentation for what is under cursor
-- 	keymap.set("n", "<leader>o", "<cmd>Lspsaga outline Toggle<CR>", opts) -- see outline on right hand side
-- 	keymap.set("n", "gtd", function() vim.lsp.buf.type_definition() end, opts)
-- 	-- keymap.set("n", "K", function() vim.lsp.buf.hover() end, opts)
-- 	keymap.set("n", "<leader>rr", function() vim.lsp.buf.references() end, opts)
-- 	keymap.set("i", "<C-s>", function() vim.lsp.buf.signature_help() end, opts)
-- 	keymap.set("n", "<leader>gr", "<cmd>Telescope lsp_references<cr>", { buffer = true })
-- 	keymap.set("n", "<leader>ws", function() vim.lsp.buf.workspace_symbol() end, opts)
-- 	keymap.set("n", "<leader>of", function() vim.diagnostic.open_float() end, opts)
-- 	-- jump into doc window use gx to go to link
-- 	keymap.set(
-- 		"n",
-- 		"kk",
-- 		vim.lsp.buf_request(0, "textDocument/hover", vim.lsp.util.make_position_params(), function(_, result, ctx)
-- 			if not result then
-- 				return
-- 			end
-- 			print(result.contents.value)
-- 		end)
-- 	)
--
-- 	-- typescript specific keymaps (e.g. rename file and update imports)
-- 	if client.name == "tsserver" then
-- 		keymap.set("n", "<leader>rf", ":TypescriptRenameFile<CR>") -- rename file and update imports
-- 		keymap.set("n", "<leader>oi", ":TypescriptOrganizeImports<CR>") -- organize imports (not in youtube nvim video)
-- 		keymap.set("n", "<leader>ru", ":TypescriptRemoveUnused<CR>") -- remove unused variables (not in youtube nvim video)
-- 	end
-- end
--
-- -- used to enable autocompletion (assign to every lsp server config)
-- local capabilities = cmp_nvim_lsp.default_capabilities()
--
-- -- Change the Diagnostic symbols in the sign column (gutter)
-- local signs = { Error = " ", Warn = " ", Hint = "⚑", Info = " " }
-- for type, icon in pairs(signs) do
-- 	local hl = "DiagnosticSign" .. type
-- 	vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = "" })
-- end
-- -- configure F#
-- lspconfig["fsautocomplete"].setup({
-- 	capabilities = capabilities,
-- 	on_attach = on_attach,
-- })
--
-- -- configure F#
-- -- lspconfig["ionide"].setup({
-- -- 	capabilities = capabilities,
-- -- 	on_attach = on_attach,
-- -- 	vim.cmd([[
-- --               let g:fsharp#lsp_recommended_colorscheme = 0
-- --     ]]),
-- -- })
--
-- -- configure rust
-- lspconfig["rust_analyzer"].setup({
-- 	capabilities = capabilities,
-- 	on_attach = on_attach,
-- })
--
-- -- configure python
-- lspconfig["pyright"].setup({
-- 	capabilities = capabilities,
-- 	on_attach = on_attach,
-- })
--
-- -- configure buf
-- lspconfig["bufls"].setup({
-- 	capabilities = capabilities,
-- 	on_attach = on_attach,
-- })
--
-- -- configure svelte
-- lspconfig["svelte"].setup({
-- 	capabilities = capabilities,
-- 	on_attach = on_attach,
-- })
--
-- -- configure helm
-- lspconfig["helm_ls"].setup({
-- 	capabilities = capabilities,
-- 	on_attach = on_attach,
-- })
--
-- -- configure html server
-- lspconfig["html"].setup({
-- 	capabilities = capabilities,
-- 	on_attach = on_attach,
-- })
--
-- -- configure typescript server with plugin
-- typescript.setup({
-- 	server = {
-- 		capabilities = capabilities,
-- 		on_attach = on_attach,
-- 	},
-- })
--
-- -- configure css server
-- lspconfig["cssls"].setup({
-- 	capabilities = capabilities,
-- 	on_attach = on_attach,
-- })
--
-- -- configure tailwindcss server
-- lspconfig["tailwindcss"].setup({
-- 	capabilities = capabilities,
-- 	on_attach = on_attach,
-- })
--
-- -- configure emmet language server
-- lspconfig["emmet_ls"].setup({
-- 	capabilities = capabilities,
-- 	on_attach = on_attach,
-- 	filetypes = { "html", "typescriptreact", "javascriptreact", "css", "sass", "scss", "less", "svelte" },
-- })
--
-- -- configure lua server (with special settings)
-- lspconfig["lua_ls"].setup({
-- 	capabilities = capabilities,
-- 	on_attach = on_attach,
-- 	settings = { -- custom settings for lua
-- 		Lua = {
-- 			-- make the language server recognize "vim" global
-- 			diagnostics = {
-- 				globals = { "vim" },
-- 			},
-- 			workspace = {
-- 				-- make language server aware of runtime files
-- 				library = {
-- 					[vim.fn.expand("$VIMRUNTIME/lua")] = true,
-- 					[vim.fn.stdpath("config") .. "/lua"] = true,
-- 				},
-- 			},
-- 		},
-- 	},
-- })
